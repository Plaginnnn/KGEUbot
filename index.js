// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import axios from 'axios'
import schedule from 'node-schedule'
import { Markup, Telegraf, session } from 'telegraf'

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = '7415179094:AAHyPLljfNicW5Kn_owAqbwmOhz5tnyn7wA'
const bot = new Telegraf(token)

const FIRST_WEEK_NUMBER = 2 // –ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ —Å–æ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏
const SCHEDULE_START_DATE = new Date('2024-02-05')

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(session())

// –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const users = new Map()
let scheduleCache = new Map()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const createMainMenu = (isAuthenticated, userName = '') => {
	const buttons = [
		['üåê –ù–∞—à–∏ —Å–æ—Ü. —Å–µ—Ç–∏'],
		['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
		['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'],
	]

	if (isAuthenticated) {
		buttons.unshift([`üë§ ${userName}`, 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
		buttons.splice(1, 0, ['üìä –ë–∞–ª–ª—ã –ë–†–°', 'üìö –ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞'])
	} else {
		buttons.unshift(['üîê –í–æ–π—Ç–∏'])
	}

	return Markup.keyboard(buttons).resize()
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const createScheduleMenu = Markup.keyboard([
	['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'],
	['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞'],
	['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é'],
	['–í—ã–±—Ä–∞—Ç—å –ø–æ –¥–∞—Ç–µ'],
	['Export Google Calendar'],
	['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
]).resize()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const deleteAllPreviousMessages = async ctx => {
	if (ctx.chat && ctx.message) {
		const currentMessageId = ctx.message.message_id
		for (let i = currentMessageId - 1; i > 0; i--) {
			try {
				await ctx.deleteMessage(i)
			} catch (error) {
				if (error.description !== 'Bad Request: message to delete not found') {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
				}
				break
			}
		}
	}
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
const initSession = (ctx, next) => {
	if (!ctx.session) {
		ctx.session = {}
	}
	return next()
}

bot.use(initSession)

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authMiddleware = (ctx, next) => {
	const userId = ctx.from.id
	if (users.has(userId)) {
		ctx.state.user = users.get(userId)
		return next()
	}
	ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "üîê –í–æ–π—Ç–∏"')
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
const getShortName = (lastName, firstName, parentName) => {
	return `${lastName} ${firstName[0]}.${parentName[0]}.`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
const fetchSchedule = async (token, week) => {
	try {
		const response = await axios.get(
			`https://iep.kgeu.ru/api/schedule${week ? `?week=${week}` : ''}`,
			{
				headers: { 'x-access-token': token },
			}
		)
		return response.data.payload
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error)
		return null
	}
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é
const fetchScheduleForWeek = async (token, week) => {
	try {
		const response = await axios.get(
			`https://iep.kgeu.ru/api/schedule?week=${week}`,
			{
				headers: { 'x-access-token': token },
			}
		)
		return response.data.payload.schedules
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error)
		return null
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
const cacheAllSchedules = async token => {
	for (let week = 1; week <= 30; week++) {
		const schedule = await fetchSchedule(token, week)
		if (schedule && schedule.schedules.length > 0) {
			schedule.schedules.forEach(item => {
				const date = new Date(item.date).toISOString().split('T')[0]
				if (!scheduleCache.has(date)) {
					scheduleCache.set(date, [])
				}
				scheduleCache.get(date).push(item)
			})
		}
	}
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
const getScheduleForDate = async (token, date) => {
	const weekNumber = getWeekNumber(date)
	const schedule = await fetchScheduleForWeek(token, weekNumber)
	if (!schedule) return null

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º toISOString –∏ split –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
	const dateString = date.toISOString().split('T')[0]
	return schedule.filter(item => item.date.startsWith(dateString))
}
// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = dateString => {
	const date = new Date(dateString)
	return date.toLocaleDateString('ru-RU', {
		day: '2-digit',
		month: '2-digit',
		year: 'numeric',
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –ø–æ –¥–∞—Ç–µ
const getWeekNumber = date => {
	const diff = date.getTime() - SCHEDULE_START_DATE.getTime()
	const oneWeek = 7 * 24 * 60 * 60 * 1000
	return Math.floor(diff / oneWeek) + FIRST_WEEK_NUMBER
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
const getDayOfWeek = dateString => {
	const date = new Date(dateString)
	const days = [
		'–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
		'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
		'–≤—Ç–æ—Ä–Ω–∏–∫',
		'—Å—Ä–µ–¥–∞',
		'—á–µ—Ç–≤–µ—Ä–≥',
		'–ø—è—Ç–Ω–∏—Ü–∞',
		'—Å—É–±–±–æ—Ç–∞',
	]
	return days[date.getDay()]
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
const formatScheduleMessage = schedules => {
	if (schedules.length === 0) {
		return '–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.'
	}

	return schedules
		.map(item => {
			const date = formatDate(item.date)
			const dayOfWeek = getDayOfWeek(item.date)
			return `
			${date} (${dayOfWeek})
		${item.type.name}${item.discip.name}
 		${item.auiditory} / ${item.timeStart.slice(0, 5)} - ${item.timeEnd.slice(0, 5)}
 		${item.teacher.name}
---------------------------------------`
		})
		.join('\n')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
const createCalendar = (year, month) => {
	const daysInMonth = new Date(year, month + 1, 0).getDate()
	const firstDayOfMonth = new Date(year, month, 1).getDay()

	let calendar = [['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']]

	let week = new Array(7).fill('')
	for (let i = 1; i <= daysInMonth; i++) {
		const dayOfWeek = (firstDayOfMonth + i - 2) % 7
		week[dayOfWeek] = i.toString()

		if (dayOfWeek === 6 || i === daysInMonth) {
			calendar.push(week)
			week = new Array(7).fill('')
		}
	}

	return calendar
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–†–°
const fetchBRS = async (token, semester = null) => {
	try {
		const url = semester
			? `https://iep.kgeu.ru/api/user/brs?semestr=${semester}`
			: 'https://iep.kgeu.ru/api/user/brs'
		const response = await axios.get(url, {
			headers: { 'x-access-token': token },
		})
		return response.data.payload
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ë–†–°:', error)
		return null
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏
const fetchRecordBook = async (token, semester = null) => {
	try {
		const url = semester
			? `https://iep.kgeu.ru/api/user/record?semestr=${semester}`
			: 'https://iep.kgeu.ru/api/user/record'
		const response = await axios.get(url, {
			headers: { 'x-access-token': token },
		})
		return response.data.payload
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏:', error)
		return null
	}
}
//–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–º–µ—Å—Ç—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞
const getAvailableSemesters = async token => {
	let semesters = []
	for (let i = 1; ; i++) {
		const data = await fetchBRS(token, i)
		if (data && data.brs.length > 0) {
			semesters.push(i)
		} else {
			break
		}
	}
	return semesters
}

const createSemesterKeyboard = semesters => {
	const keyboard = semesters.map(semester => [`–°–µ–º–µ—Å—Ç—Ä ${semester}`])
	keyboard.push(['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
	return Markup.keyboard(keyboard).resize()
}

//–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const sendDailyNotification = async () => {
	const now = new Date()
	for (const [userId, user] of users.entries()) {
		if (user.notificationsEnabled) {
			const schedules = await getScheduleForDate(user.token, now)
			if (schedules && schedules.length > 0) {
				await bot.telegram.sendMessage(
					userId,
					`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n${formatScheduleMessage(schedules)}`
				)
			}
		}
	}
}

schedule.scheduleJob('0 6 * * *', sendDailyNotification) //–í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ 6 —É—Ç—Ä–∞

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply(
		`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ KGEUInfoBot.
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –í—ã —Å–º–æ–∂–µ—Ç–µ:

üìö –°–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–¥–æ–º–æ—Å—Ç—è—Ö —É—á—ë–±—ã
üóìÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –æ—Ç —Å–∞–π—Ç–∞ https://e.kgeu.ru/

–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üéì
`,
		mainMenu
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.hears(/üë§ .+/, authMiddleware, async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userData = ctx.state.user.userData
	await ctx.reply(
		`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
–ò–º—è: ${userData.FirstName}
–§–∞–º–∏–ª–∏—è: ${userData.LastName}
–û—Ç—á–µ—Å—Ç–≤–æ: ${userData.ParentName}
Email: ${userData.EMail}
–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${userData.Position}`,
		createMainMenu(
			true,
			getShortName(userData.LastName, userData.FirstName, userData.ParentName)
		)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
bot.hears('üîê –í–æ–π—Ç–∏', async ctx => {
	await deleteAllPreviousMessages(ctx)
	await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:')
	ctx.session.state = 'awaitingLogin'
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
bot.hears('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', authMiddleware, async ctx => {
	await deleteAllPreviousMessages(ctx)
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', createScheduleMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
bot.hears('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const tomorrow = new Date()
	tomorrow.setDate(tomorrow.getDate() + 1)

	const schedules = await getScheduleForDate(token, tomorrow)
	if (schedules && schedules.length > 0) {
		await ctx.reply(formatScheduleMessage(schedules))
	} else {
		await ctx.reply('–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
bot.hears('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const today = new Date()

	const schedules = await getScheduleForDate(token, today)
	if (schedules && schedules.length > 0) {
		await ctx.reply(formatScheduleMessage(schedules))
	} else {
		await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
	}
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
bot.hears('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const today = new Date()
	const weekStart = new Date(
		today.setDate(today.getDate() - today.getDay() + 1)
	)
	const weekEnd = new Date(today.setDate(today.getDate() - today.getDay() + 7))

	let weekSchedule = []
	for (let d = weekStart; d <= weekEnd; d.setDate(d.getDate() + 1)) {
		const daySchedule = await getScheduleForDate(token, new Date(d))
		if (daySchedule) {
			weekSchedule = weekSchedule.concat(daySchedule)
		}
	}

	if (weekSchedule.length > 0) {
		await ctx.reply(formatScheduleMessage(weekSchedule))
	} else {
		await ctx.reply('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
	}
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∞–ª–æ–≤ –ë–†–°
bot.hears('üìä –ë–∞–ª–ª—ã –ë–†–°', authMiddleware, async ctx => {
	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
		Markup.keyboard([
			['–ë–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞'],
			['–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –ë–†–°'],
			['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
		]).resize()
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏
bot.hears('üìö –ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞', authMiddleware, async ctx => {
	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
		Markup.keyboard([
			['–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞'],
			['–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏'],
			['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
		]).resize()
	)
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
bot.hears('–ë–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = users.get(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const brsData = await fetchBRS(user.token)
	if (brsData) {
		let message = '–ë–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞:\n\n'
		brsData.brs.forEach(subject => {
			const totalPoints =
				subject.points.reduce((sum, point) => sum + point.point, 0) +
				subject.addPoints.reduce((sum, point) => sum + point, 0)
			message += `${subject.discip}: ${totalPoints} –±–∞–ª–ª–æ–≤\n`
		})
		await ctx.reply(message)
	} else {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ë–†–°.')
	}
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ–¥–æ–º–æ—Å—Ç–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
bot.hears('–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = users.get(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const recordData = await fetchRecordBook(user.token)
	if (recordData) {
		let message = `–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ (—Å–µ–º–µ—Å—Ç—Ä ${recordData.semestr}):\n\n`
		recordData.record.forEach(subject => {
			message += `${subject.discip}: ${subject.mark} –±–∞–ª–ª–æ–≤, ${subject.result}\n`
		})
		await ctx.reply(message)
	} else {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏.')
	}
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞
bot.hears('–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –ë–†–°', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = users.get(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const semesters = await getAvailableSemesters(user.token)
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä:', createSemesterKeyboard(semesters))
	ctx.session.state = 'awaitingBRSSemester'
})

bot.hears('–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = users.get(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const semesters = await getAvailableSemesters(user.token)
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä:', createSemesterKeyboard(semesters))
	ctx.session.state = 'awaitingRecordSemester'
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.hears('–í—ã–±—Ä–∞—Ç—å –ø–æ –¥–∞—Ç–µ', authMiddleware, async ctx => {
	const now = new Date()
	const year = now.getFullYear()
	const month = now.getMonth()
	const calendar = createCalendar(year, month)

	const monthNames = [
		'–Ø–Ω–≤–∞—Ä—å',
		'–§–µ–≤—Ä–∞–ª—å',
		'–ú–∞—Ä—Ç',
		'–ê–ø—Ä–µ–ª—å',
		'–ú–∞–π',
		'–ò—é–Ω—å',
		'–ò—é–ª—å',
		'–ê–≤–≥—É—Å—Ç',
		'–°–µ–Ω—Ç—è–±—Ä—å',
		'–û–∫—Ç—è–±—Ä—å',
		'–ù–æ—è–±—Ä—å',
		'–î–µ–∫–∞–±—Ä—å',
	]

	const keyboard = calendar.map(week =>
		week.map(day =>
			day
				? Markup.button.callback(day, `date:${year}-${month + 1}-${day}`)
				: Markup.button.callback(' ', 'noop')
		)
	)

	keyboard.unshift([
		Markup.button.callback('<<', `month:${year}-${month - 1}`),
		Markup.button.callback(monthNames[month], 'noop'),
		Markup.button.callback('>>', `month:${year}-${month + 1}`),
	])

	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É:',
		Markup.inlineKeyboard(keyboard)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async ctx => {
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
bot.hears('üåê –ù–∞—à–∏ —Å–æ—Ü. —Å–µ—Ç–∏', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply(
		`–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ö–ì–≠–£: https://www.kgeu.ru/ üåê
		–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ö–ì–≠–£: https://e.kgeu.ru/ üåê
		–í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/plaginnnn üåê
		Telegram: @Plaginnnnn üåê
`,
		mainMenu
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.hears('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async ctx => {
	const userId = ctx.from.id
	if (users.has(userId)) {
		const user = users.get(userId)
		user.notificationsEnabled = !user.notificationsEnabled
		users.set(userId, user)
		await ctx.reply(
			user.notificationsEnabled
				? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã'
				: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã',
			createMainMenu(
				true,
				getShortName(
					user.userData.LastName,
					user.userData.FirstName,
					user.userData.ParentName
				)
			)
		)
	} else {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.')
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
bot.hears('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply(
		`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –≤–≤–µ–¥—è —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ https://e.kgeu.ru/ üîê
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –æ—Ç—á–µ—Å—Ç–≤–æ, email, –¥–æ–ª–∂–Ω–æ—Å—Ç—å) –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ. üë§
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö. üîî
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –≤ Telegram. –û–¥–Ω–∞–∫–æ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ—ç—Ç–æ–º—É —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. üíæ
–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ö–ì–≠–£ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ. üéì
`,
		mainMenu
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º)
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º)
bot.on('callback_query', async ctx => {
	const userId = ctx.from.id
	let token

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	if (users.has(userId)) {
		token = users.get(userId).token
	} else {
		await ctx.answerCbQuery(
			'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.'
		)
		return
	}

	const callbackData = ctx.callbackQuery.data

	if (callbackData === 'noop') {
		return await ctx.answerCbQuery()
	}

	if (callbackData === 'back_to_schedule') {
		await ctx.answerCbQuery()
		return await ctx.editMessageText(
			'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:',
			createScheduleMenu
		)
	}

	if (callbackData.startsWith('date:')) {
		const [year, month, day] = callbackData.split(':')[1].split('-').map(Number)
		const date = new Date(year, month - 1, day)

		const schedules = await getScheduleForDate(token, date)

		if (schedules && schedules.length > 0) {
			await ctx.answerCbQuery()
			await ctx.editMessageText(formatScheduleMessage(schedules), {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é',
								callback_data: `month:${year}-${month - 1}`,
							},
						],
					],
				},
			})
		} else {
			await ctx.answerCbQuery('–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
		}
	}

	if (callbackData.startsWith('month:')) {
		const [year, month] = callbackData.split(':')[1].split('-').map(Number)
		const calendar = createCalendar(year, month)
		const monthNames = [
			'–Ø–Ω–≤–∞—Ä—å',
			'–§–µ–≤—Ä–∞–ª—å',
			'–ú–∞—Ä—Ç',
			'–ê–ø—Ä–µ–ª—å',
			'–ú–∞–π',
			'–ò—é–Ω—å',
			'–ò—é–ª—å',
			'–ê–≤–≥—É—Å—Ç',
			'–°–µ–Ω—Ç—è–±—Ä—å',
			'–û–∫—Ç—è–±—Ä—å',
			'–ù–æ—è–±—Ä—å',
			'–î–µ–∫–∞–±—Ä—å',
		]

		const keyboard = calendar.map(week =>
			week.map(day =>
				day
					? Markup.button.callback(day, `date:${year}-${month + 1}-${day}`)
					: Markup.button.callback(' ', 'noop')
			)
		)

		keyboard.unshift([
			Markup.button.callback('<<', `month:${year}-${month - 1}`),
			Markup.button.callback(monthNames[month], 'noop'),
			Markup.button.callback('>>', `month:${year}-${month + 1}`),
		])

		await ctx.answerCbQuery()
		await ctx.editMessageText(
			'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É:',
			Markup.inlineKeyboard(keyboard)
		)
	}
})

const exportScheduleToCSV = async token => {
	let allSchedules = []
	for (let week = FIRST_WEEK_NUMBER; week <= 30; week++) {
		const weekSchedule = await fetchScheduleForWeek(token, week)
		if (weekSchedule) {
			allSchedules = allSchedules.concat(weekSchedule)
		}
	}

	let csvContent =
		'Subject,Start Date,Start Time,End Date,End Time,Location,Description\n'
	allSchedules.forEach(item => {
		const date = new Date(item.date).toISOString().split('T')[0]
		csvContent += `"${item.discip.name} (${item.type.name})",${date},${item.timeStart},${date},${item.timeEnd},${item.auiditory},"${item.teacher.name}"\n`
	})

	return Buffer.from(csvContent, 'utf8')
}

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—É–≥–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.hears('Export Google Calendar', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const csvBuffer = await exportScheduleToCSV(token)

	await ctx.replyWithDocument(
		{ source: csvBuffer, filename: 'schedule.csv' },
		{ caption: '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –¥–ª—è Google Calendar.' }
	)
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
	await deleteAllPreviousMessages(ctx)

	const userId = ctx.from.id
	if (ctx.message.text.startsWith('–°–µ–º–µ—Å—Ç—Ä ')) {
		const semester = parseInt(ctx.message.text.split(' ')[1])
		const userId = ctx.from.id
		const user = users.get(userId)

		if (!user || !user.token) {
			await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
			return
		}

		if (ctx.session.state === 'awaitingBRSSemester') {
			const brsData = await fetchBRS(user.token, semester)
			if (brsData && brsData.brs) {
				let message = `–ë–∞–ª–ª—ã –∑–∞ ${semester} —Å–µ–º–µ—Å—Ç—Ä:\n\n`
				brsData.brs.forEach(subject => {
					const totalPoints =
						subject.points.reduce((sum, point) => sum + point.point, 0) +
						subject.addPoints.reduce((sum, point) => sum + point, 0)
					message += `${subject.discip}: ${totalPoints} –±–∞–ª–ª–æ–≤\n`
				})
				await ctx.reply(message)
			} else {
				await ctx.reply(
					'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ë–†–° –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.'
				)
			}
		} else if (ctx.session.state === 'awaitingRecordSemester') {
			const recordData = await fetchRecordBook(user.token, semester)
			if (recordData && recordData.record) {
				let message = `–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ (—Å–µ–º–µ—Å—Ç—Ä ${semester}):\n\n`
				recordData.record.forEach(subject => {
					message += `${subject.discip}: ${subject.mark} –±–∞–ª–ª–æ–≤, ${subject.result}\n`
				})
				await ctx.reply(message)
			} else {
				await ctx.reply(
					'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.'
				)
			}
		}

		// –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
		const mainMenu = createMainMenu(
			true,
			getShortName(
				user.userData.LastName,
				user.userData.FirstName,
				user.userData.ParentName
			)
		)
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu)

		delete ctx.session.state
		return
	}

	switch (ctx.session.state) {
		case 'awaitingLogin':
			ctx.session.login = ctx.message.text
			await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
			ctx.session.state = 'awaitingPassword'
			break
		case 'awaitingBRSSemester':
			if (ctx.message.text.startsWith('–°–µ–º–µ—Å—Ç—Ä ')) {
				const semester = parseInt(ctx.message.text.split(' ')[1])
				const brsData = await fetchBRS(ctx.state.user.token, semester)
				if (brsData) {
					let message = `–ë–∞–ª–ª—ã –∑–∞ ${semester} —Å–µ–º–µ—Å—Ç—Ä:\n\n`
					brsData.brs.forEach(subject => {
						const totalPoints =
							subject.points.reduce((sum, point) => sum + point.point, 0) +
							subject.addPoints.reduce((sum, point) => sum + point, 0)
						message += `${subject.discip}: ${totalPoints} –±–∞–ª–ª–æ–≤\n`
					})
					await ctx.reply(message)
				} else {
					await ctx.reply(
						'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ë–†–° –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.'
					)
				}
			}
			delete ctx.session.state
			break

		case 'awaitingRecordSemester':
			if (ctx.message.text.startsWith('–°–µ–º–µ—Å—Ç—Ä ')) {
				const semester = parseInt(ctx.message.text.split(' ')[1])
				const recordData = await fetchRecordBook(ctx.state.user.token, semester)
				if (recordData) {
					let message = `–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ (—Å–µ–º–µ—Å—Ç—Ä ${semester}):\n\n`
					recordData.record.forEach(subject => {
						message += `${subject.discip}: ${subject.mark} –±–∞–ª–ª–æ–≤, ${subject.result}\n`
					})
					await ctx.reply(message)
				} else {
					await ctx.reply(
						'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.'
					)
				}
			}
			delete ctx.session.state
			break
		case 'awaitingPassword':
			const { login } = ctx.session
			const password = ctx.message.text

			try {
				const response = await axios.get(`https://iep.kgeu.ru/api/auth`, {
					params: { login, password },
				})

				if (response.data.type === 'success') {
					const { token, userData } = response.data.payload
					users.set(userId, {
						login,
						token,
						userData,
						notificationsEnabled: false,
					})
					const shortName = getShortName(
						userData.LastName,
						userData.FirstName,
						userData.ParentName
					)
					await ctx.reply(
						`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userData.LastName} ${userData.FirstName} ${userData.ParentName}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.`,
						createMainMenu(true, shortName)
					)
					await cacheAllSchedules(token)
				} else {
					await ctx.reply(
						'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
						createMainMenu(false)
					)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
				await ctx.reply(
					'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
					createMainMenu(false)
				)
			}

			delete ctx.session.state
			delete ctx.session.login
			break
		case 'awaitingDate':
			const dateInput = ctx.message.text
			const [day, month, year] = dateInput.split('.').map(Number)
			const date = new Date(year, month - 1, day)
			if (!isNaN(date.getTime())) {
				const formattedDate = date.toISOString().split('T')[0]
				const schedule = scheduleCache.get(formattedDate)
				if (schedule) {
					await ctx.reply(formatScheduleMessage([schedule]))
				} else {
					await ctx.reply('–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
				}
			} else {
				await ctx.reply(
					'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.'
				)
			}
			delete ctx.session.state
			break
		default:
			await ctx.reply(
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.',
				createMainMenu(
					users.has(userId),
					users.has(userId)
						? getShortName(
								users.get(userId).userData.LastName,
								users.get(userId).userData.FirstName,
								users.get(userId).userData.ParentName
						  )
						: ''
				)
			)
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
	console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
