// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import axios from 'axios'
import { Markup, Telegraf, session } from 'telegraf'

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = '7415179094:AAHyPLljfNicW5Kn_owAqbwmOhz5tnyn7wA'
const bot = new Telegraf(token)

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(session())

// –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const users = new Map()
let scheduleCache = new Map()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const createMainMenu = (isAuthenticated, userName = '') => {
	const buttons = [
		['üåê –ù–∞—à–∏ —Å–æ—Ü. —Å–µ—Ç–∏'],
		['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
		['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'],
	]

	if (isAuthenticated) {
		buttons.unshift([`üë§ ${userName}`, 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
	} else {
		buttons.unshift(['üîê –í–æ–π—Ç–∏'])
	}

	return Markup.keyboard(buttons).resize()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const createScheduleMenu = Markup.keyboard([
	['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞'],
	['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é'],
	['–ö–∞–ª–µ–Ω–¥–∞—Ä—å'],
	['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
]).resize()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const deleteAllPreviousMessages = async ctx => {
	if (ctx.chat && ctx.message) {
		const currentMessageId = ctx.message.message_id
		for (let i = currentMessageId - 1; i > 0; i--) {
			try {
				await ctx.deleteMessage(i)
			} catch (error) {
				if (error.description !== 'Bad Request: message to delete not found') {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
				}
				break
			}
		}
	}
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
const initSession = (ctx, next) => {
	if (!ctx.session) {
		ctx.session = {}
	}
	return next()
}

bot.use(initSession)

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authMiddleware = (ctx, next) => {
	const userId = ctx.from.id
	if (users.has(userId)) {
		ctx.state.user = users.get(userId)
		return next()
	}
	ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "üîê –í–æ–π—Ç–∏"')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
const getShortName = (lastName, firstName, parentName) => {
	return `${lastName} ${firstName[0]}.${parentName[0]}.`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
const fetchSchedule = async (token, week) => {
	try {
		const response = await axios.get(
			`https://iep.kgeu.ru/api/schedule${week ? `?week=${week}` : ''}`,
			{
				headers: { 'x-access-token': token },
			}
		)
		return response.data.payload
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error)
		return null
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
const cacheAllSchedules = async token => {
	for (let week = 1; week <= 30; week++) {
		const schedule = await fetchSchedule(token, week)
		if (schedule && schedule.schedules.length > 0) {
			schedule.schedules.forEach(item => {
				const date = new Date(item.date).toISOString().split('T')[0]
				scheduleCache.set(date, item)
			})
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = dateString => {
	const date = new Date(dateString)
	return date.toLocaleDateString('ru-RU', {
		day: '2-digit',
		month: '2-digit',
		year: 'numeric',
	})
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
const getDayOfWeek = dateString => {
	const date = new Date(dateString)
	const days = [
		'–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
		'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
		'–≤—Ç–æ—Ä–Ω–∏–∫',
		'—Å—Ä–µ–¥–∞',
		'—á–µ—Ç–≤–µ—Ä–≥',
		'–ø—è—Ç–Ω–∏—Ü–∞',
		'—Å—É–±–±–æ—Ç–∞',
	]
	return days[date.getDay()]
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
const formatScheduleMessage = schedules => {
	if (schedules.length === 0) {
		return '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.'
	}

	return schedules
		.map(item => {
			const date = formatDate(item.date)
			const dayOfWeek = getDayOfWeek(item.date)
			return `–î–∞—Ç–∞: ${date} (${dayOfWeek})
–í—Ä–µ–º—è: ${item.timeStart} - ${item.timeEnd}
–ü—Ä–µ–¥–º–µ—Ç: ${item.discip.name}
–¢–∏–ø: ${item.type.name}
–ê—É–¥–∏—Ç–æ—Ä–∏—è: ${item.auiditory}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${item.teacher.name}
-------------------`
		})
		.join('\n')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
const createCalendar = (year, month) => {
	const daysInMonth = new Date(year, month + 1, 0).getDate()
	const firstDayOfMonth = new Date(year, month, 1).getDay()

	let calendar = [['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']]

	let week = new Array(7).fill('')
	for (let i = 1; i <= daysInMonth; i++) {
		const dayOfWeek = (firstDayOfMonth + i - 2) % 7
		week[dayOfWeek] = i.toString()

		if (dayOfWeek === 6 || i === daysInMonth) {
			calendar.push(week)
			week = new Array(7).fill('')
		}
	}

	return calendar
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.hears(/üë§ .+/, authMiddleware, async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userData = ctx.state.user.userData
	await ctx.reply(
		`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
–ò–º—è: ${userData.FirstName}
–§–∞–º–∏–ª–∏—è: ${userData.LastName}
–û—Ç—á–µ—Å—Ç–≤–æ: ${userData.ParentName}
Email: ${userData.EMail}
–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${userData.Position}`,
		createMainMenu(
			true,
			getShortName(userData.LastName, userData.FirstName, userData.ParentName)
		)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
bot.hears('üîê –í–æ–π—Ç–∏', async ctx => {
	await deleteAllPreviousMessages(ctx)
	await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:')
	ctx.session.state = 'awaitingLogin'
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
bot.hears('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', authMiddleware, async ctx => {
	await deleteAllPreviousMessages(ctx)
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', createScheduleMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
bot.hears('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const tomorrow = new Date()
	tomorrow.setDate(tomorrow.getDate() + 1)
	const tomorrowStr = tomorrow.toISOString().split('T')[0]

	if (scheduleCache.size === 0) {
		await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
		await cacheAllSchedules(token)
	}

	const schedule = scheduleCache.get(tomorrowStr)
	if (schedule) {
		await ctx.reply(formatScheduleMessage([schedule]))
	} else {
		await ctx.reply('–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
bot.hears('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const schedule = await fetchSchedule(token)
	if (schedule) {
		await ctx.reply(formatScheduleMessage(schedule.schedules))
	} else {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.')
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.hears('–ö–∞–ª–µ–Ω–¥–∞—Ä—å', authMiddleware, async ctx => {
	const now = new Date()
	const year = now.getFullYear()
	const month = now.getMonth()
	const calendar = createCalendar(year, month)

	const monthNames = [
		'–Ø–Ω–≤–∞—Ä—å',
		'–§–µ–≤—Ä–∞–ª—å',
		'–ú–∞—Ä—Ç',
		'–ê–ø—Ä–µ–ª—å',
		'–ú–∞–π',
		'–ò—é–Ω—å',
		'–ò—é–ª—å',
		'–ê–≤–≥—É—Å—Ç',
		'–°–µ–Ω—Ç—è–±—Ä—å',
		'–û–∫—Ç—è–±—Ä—å',
		'–ù–æ—è–±—Ä—å',
		'–î–µ–∫–∞–±—Ä—å',
	]

	const keyboard = calendar.map(week =>
		week.map(day =>
			day
				? Markup.button.callback(day, `date:${year}-${month + 1}-${day}`)
				: Markup.button.callback(' ', 'noop')
		)
	)

	keyboard.unshift([
		Markup.button.callback('<<', `month:${year}-${month - 1}`),
		Markup.button.callback(monthNames[month], 'noop'),
		Markup.button.callback('>>', `month:${year}-${month + 1}`),
	])

	keyboard.push([
		Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', 'back_to_schedule'),
	])

	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É:',
		Markup.inlineKeyboard(keyboard)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async ctx => {
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
bot.hears('üåê –ù–∞—à–∏ —Å–æ—Ü. —Å–µ—Ç–∏', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply('–ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:', mainMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.hears('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã', mainMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
bot.hears('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	await ctx.reply(
		'–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ö–ì–≠–£.',
		mainMenu
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º)
bot.on('callback_query', async ctx => {
	const callbackData = ctx.callbackQuery.data

	if (callbackData === 'noop') {
		return await ctx.answerCbQuery()
	}

	if (callbackData === 'back_to_schedule') {
		await ctx.answerCbQuery()
		return await ctx.editMessageText(
			'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:',
			createScheduleMenu
		)
	}

	if (callbackData.startsWith('date:')) {
		const [year, month, day] = callbackData.split(':')[1].split('-').map(Number)
		const date = new Date(year, month - 1, day)
		const formattedDate = date.toISOString().split('T')[0]

		const schedule = scheduleCache.get(formattedDate)
		if (schedule) {
			await ctx.answerCbQuery()
			await ctx.editMessageText(formatScheduleMessage([schedule]))
		} else {
			await ctx.answerCbQuery('–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
		}
		return
	}

	if (callbackData.startsWith('month:')) {
		const [year, month] = callbackData.split(':')[1].split('-').map(Number)
		const calendar = createCalendar(year, month)
		const monthNames = [
			'–Ø–Ω–≤–∞—Ä—å',
			'–§–µ–≤—Ä–∞–ª—å',
			'–ú–∞—Ä—Ç',
			'–ê–ø—Ä–µ–ª—å',
			'–ú–∞–π',
			'–ò—é–Ω—å',
			'–ò—é–ª—å',
			'–ê–≤–≥—É—Å—Ç',
			'–°–µ–Ω—Ç—è–±—Ä—å',
			'–û–∫—Ç—è–±—Ä—å',
			'–ù–æ—è–±—Ä—å',
			'–î–µ–∫–∞–±—Ä—å',
		]

		const keyboard = calendar.map(week =>
			week.map(day =>
				day
					? Markup.button.callback(day, `date:${year}-${month + 1}-${day}`)
					: Markup.button.callback(' ', 'noop')
			)
		)

		keyboard.unshift([
			Markup.button.callback('<<', `month:${year}-${month - 1}`),
			Markup.button.callback(monthNames[month], 'noop'),
			Markup.button.callback('>>', `month:${year}-${month + 1}`),
		])

		keyboard.push([
			Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', 'back_to_schedule'),
		])

		await ctx.answerCbQuery()
		await ctx.editMessageText(
			'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É:',
			Markup.inlineKeyboard(keyboard)
		)
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
	await deleteAllPreviousMessages(ctx)

	const userId = ctx.from.id

	switch (ctx.session.state) {
		case 'awaitingLogin':
			ctx.session.login = ctx.message.text
			await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
			ctx.session.state = 'awaitingPassword'
			break
		case 'awaitingPassword':
			const { login } = ctx.session
			const password = ctx.message.text

			try {
				const response = await axios.get(`https://iep.kgeu.ru/api/auth`, {
					params: { login, password },
				})

				if (response.data.type === 'success') {
					const { token, userData } = response.data.payload
					users.set(userId, { login, token, userData })
					const shortName = getShortName(
						userData.LastName,
						userData.FirstName,
						userData.ParentName
					)
					await ctx.reply(
						`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userData.LastName} ${userData.FirstName} ${userData.ParentName}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.`,
						createMainMenu(true, shortName)
					)
					await cacheAllSchedules(token)
				} else {
					await ctx.reply(
						'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
						createMainMenu(false)
					)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
				await ctx.reply(
					'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
					createMainMenu(false)
				)
			}

			delete ctx.session.state
			delete ctx.session.login
			break
		case 'awaitingDate':
			const dateInput = ctx.message.text
			const [day, month, year] = dateInput.split('.').map(Number)
			const date = new Date(year, month - 1, day)
			if (!isNaN(date.getTime())) {
				const formattedDate = date.toISOString().split('T')[0]
				const schedule = scheduleCache.get(formattedDate)
				if (schedule) {
					await ctx.reply(formatScheduleMessage([schedule]))
				} else {
					await ctx.reply('–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
				}
			} else {
				await ctx.reply(
					'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.'
				)
			}
			delete ctx.session.state
			break
		default:
			await ctx.reply(
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.',
				createMainMenu(
					users.has(userId),
					users.has(userId)
						? getShortName(
								users.get(userId).userData.LastName,
								users.get(userId).userData.FirstName,
								users.get(userId).userData.ParentName
						  )
						: ''
				)
			)
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
	console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
	ctx.reply(
		'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
		mainMenu
	)
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
