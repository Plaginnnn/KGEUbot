
import { Markup, Telegraf, session } from 'telegraf'
import { token } from './config.js';
import { authMiddleware, initSession, createAuthenticatedMenu } from './userFunctions.js';
import { createMainMenu, createScheduleMenu, createSemesterKeyboard } from './menuFunctions.js';
import { getUser, saveUser, updateNotificationSettings, deleteUserData } from './database.js';
import { fetchBRS, fetchRecordBook, getAvailableSemesters } from './userFunctions.js';
import { getScheduleForDate, formatScheduleMessage, createCalendar, exportScheduleToCSV } from './scheduleFunctions.js';
import { formatDate, deleteAllPreviousMessages, getShortName } from './utils.js';
import axios from 'axios'
export const users = new Map();
const bot = new Telegraf(token);

bot.use(session());
bot.use(initSession);
export {bot}
let isStartCommandRunning = false
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async ctx => {
	if (isStartCommandRunning) return
	isStartCommandRunning = true

	try {
		await deleteAllPreviousMessages(ctx)
		const mainMenu = await createAuthenticatedMenu(ctx)
		await ctx.reply(
			`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
			–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:	
			üìö –°–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–¥–æ–º–æ—Å—Ç—è—Ö —É—á—ë–±—ã
			üóìÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
			üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
			–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –æ—Ç —Å–∞–π—Ç–∞ https://e.kgeu.ru/
				
			–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üéì`,
			mainMenu
		)
	} finally {
		isStartCommandRunning = false
	}
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.hears(/üë§ .+/, authMiddleware, async ctx => {
	await deleteAllPreviousMessages(ctx)
	const userData = ctx.state.user.userData
	await ctx.reply(
		`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
${userData.LastName} ${userData.FirstName}  ${userData.ParentName}
Email: ${userData.EMail}
–†–æ–ª—å: ${userData.Position}`,
		createMainMenu(
			true,
			getShortName(userData.LastName, userData.FirstName, userData.ParentName)
		)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
bot.hears('üîê –í–æ–π—Ç–∏', async (ctx) => {
    await deleteAllPreviousMessages(ctx);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
    ctx.session.state = 'awaitingLogin';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏"
bot.hears('üö™ –í—ã–π—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞', async ctx => {
    const userId = ctx.from.id
    await deleteUserData(userId)
    await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "üîê –í–æ–π—Ç–∏"', createMainMenu(false))
})


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
bot.hears('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', authMiddleware, async (ctx) => {
    await deleteAllPreviousMessages(ctx);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', createScheduleMenu);
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
bot.hears('–ù–∞ –∑–∞–≤—Ç—Ä–∞', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const tomorrow = new Date()
	tomorrow.setDate(tomorrow.getDate() + 1)

	const schedules = await getScheduleForDate(token, tomorrow)
	if (schedules && schedules.length > 0) {
		await ctx.reply(formatScheduleMessage(schedules))
	} else {
		await ctx.reply('–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
	}
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
bot.hears('–ù–∞ —Å–µ–≥–æ–¥–Ω—è', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const today = new Date()

	const schedules = await getScheduleForDate(token, today)
	if (schedules && schedules.length > 0) {
		await ctx.reply(formatScheduleMessage(schedules))
	} else {
		await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
bot.hears('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const today = new Date()
	const weekStart = new Date(
		today.setDate(today.getDate() - today.getDay() + 1)
	)
	const weekEnd = new Date(today.setDate(today.getDate() - today.getDay() + 7))

	let weekSchedule = []
	for (let d = weekStart; d <= weekEnd; d.setDate(d.getDate() + 1)) {
		const daySchedule = await getScheduleForDate(token, new Date(d))
		if (daySchedule) {
			weekSchedule = weekSchedule.concat(daySchedule)
		}
	}

	if (weekSchedule.length > 0) {
		await ctx.reply(formatScheduleMessage(weekSchedule))
	} else {
		await ctx.reply('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
	}
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∞–ª–æ–≤ –ë–†–°
bot.hears('üìä –ë–∞–ª–ª—ã –ë–†–°', authMiddleware, async ctx => {
	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
		Markup.keyboard([
			['–ë–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞'],
			['–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –ë–†–°'],
			['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
		]).resize()
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ (–∫–∞–∫ –¥–ª—è –ë–†–°, —Ç–∞–∫ –∏ –¥–ª—è –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏)
bot.hears(/^–°–µ–º–µ—Å—Ç—Ä \d+$/, authMiddleware, async ctx => {
	const semester = parseInt(ctx.match[0].split(' ')[1])
	const userId = ctx.from.id
	const user = await getUser(userId)

	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}

	if (ctx.session.state === 'awaitingBRSSemester') {
		const brsData = await fetchBRS(user.token, semester)
		if (brsData) {
			let message = `–ë–∞–ª–ª—ã –ë–†–° –∑–∞ ${semester} —Å–µ–º–µ—Å—Ç—Ä:\n\n`
			brsData.brs.forEach(subject => {
				const totalPoints =
					subject.points.reduce((sum, point) => sum + point.point, 0) +
					subject.addPoints.reduce((sum, point) => sum + point, 0)
				message += `${subject.discip}: ${totalPoints} –±–∞–ª–ª–æ–≤\n`
			})
			await ctx.reply(message)
		} else {
			await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ë–†–° –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.')
		}
	} else if (ctx.session.state === 'awaitingRecordSemester') {
		const recordData = await fetchRecordBook(user.token, semester)
		if (recordData) {
			let message = `–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –∑–∞ ${semester} —Å–µ–º–µ—Å—Ç—Ä:\n\n`
			recordData.record.forEach(subject => {
				message += `${subject.discip}: ${subject.mark} –±–∞–ª–ª–æ–≤, ${subject.result}\n`
			})
			await ctx.reply(message)
		} else {
			await ctx.reply(
				'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.'
			)
		}
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
	delete ctx.session.state

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	const mainMenu = await createAuthenticatedMenu(ctx)
	await ctx.reply('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏
bot.hears('üìö –ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞', authMiddleware, async ctx => {
	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
		Markup.keyboard([
			['–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞'],
			['–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏'],
			['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
		]).resize()
	)
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
bot.hears('–ë–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = await getUser(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const brsData = await fetchBRS(user.token)
	if (brsData) {
		let message = '–ë–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞:\n\n'
		brsData.brs.forEach(subject => {
			const totalPoints =
				subject.points.reduce((sum, point) => sum + point.point, 0) +
				subject.addPoints.reduce((sum, point) => sum + point, 0)
			message += `${subject.discip}: ${totalPoints} –±–∞–ª–ª–æ–≤\n`
		})
		await ctx.reply(message)
	} else {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ë–†–°.')
	}
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ–¥–æ–º–æ—Å—Ç–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
bot.hears('–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = await getUser(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const recordData = await fetchRecordBook(user.token)
	if (recordData) {
		let message = `–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ (—Å–µ–º–µ—Å—Ç—Ä ${recordData.semestr}):\n\n`
		recordData.record.forEach(subject => {
			message += `${subject.discip}: ${subject.mark} –±–∞–ª–ª–æ–≤, ${subject.result}\n`
		})
		await ctx.reply(message)
	} else {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏.')
	}
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ –ë–†–°
bot.hears('–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –ë–†–°', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = await getUser(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const semesters = await getAvailableSemesters(user.token)
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä:', createSemesterKeyboard(semesters))
	ctx.session.state = 'awaitingBRSSemester'
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏
bot.hears('–í—ã–±—Ä–∞—Ç—å —Å–µ–º–µ—Å—Ç—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏', authMiddleware, async ctx => {
	const userId = ctx.from.id
	const user = await getUser(userId)
	if (!user || !user.token) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
		return
	}
	const semesters = await getAvailableSemesters(user.token)
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä:', createSemesterKeyboard(semesters))
	ctx.session.state = 'awaitingRecordSemester'
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.hears('–ö–∞–ª–µ–Ω–¥–∞—Ä—å', authMiddleware, async ctx => {
	const now = new Date()
	const year = now.getFullYear()
	const month = now.getMonth()
	const calendar = createCalendar(year, month)

	const monthNames = [
		'–Ø–Ω–≤–∞—Ä—å',
		'–§–µ–≤—Ä–∞–ª—å',
		'–ú–∞—Ä—Ç',
		'–ê–ø—Ä–µ–ª—å',
		'–ú–∞–π',
		'–ò—é–Ω—å',
		'–ò—é–ª—å',
		'–ê–≤–≥—É—Å—Ç',
		'–°–µ–Ω—Ç—è–±—Ä—å',
		'–û–∫—Ç—è–±—Ä—å',
		'–ù–æ—è–±—Ä—å',
		'–î–µ–∫–∞–±—Ä—å',
	]

	const keyboard = calendar.map(week =>
		week.map(day =>
			day
				? Markup.button.callback(day, `date:${year}-${month + 1}-${day}`)
				: Markup.button.callback(' ', 'noop')
		)
	)

	keyboard.unshift([
		Markup.button.callback('<<', `month:${year}-${month - 1}`),
		Markup.button.callback(monthNames[month], 'noop'),
		Markup.button.callback('>>', `month:${year}-${month + 1}`),
	])

	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É:',
		Markup.inlineKeyboard(keyboard)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async ctx => {
	const mainMenu = await createAuthenticatedMenu(ctx)
	await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
bot.hears('üåê –ù–∞—à–∏ —Å–æ—Ü. —Å–µ—Ç–∏', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const mainMenu = await createAuthenticatedMenu(ctx)
	await ctx.reply(
		`–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ö–ì–≠–£: https://www.kgeu.ru/ üåê
        –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ö–ì–≠–£: https://e.kgeu.ru/ üåê
        –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞:
        –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/plaginnnn üåê
        Telegram: @Plaginnnnn üåê
`,
		mainMenu
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.hears('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async ctx => {
	const userId = ctx.from.id
	const user = await getUser(userId)
	if (user) {
		const newNotificationStatus = !user.notificationsEnabled
		await updateNotificationSettings(userId, newNotificationStatus)
		await saveUser(
			userId,
			user.login,
			user.token,
			user.userData,
			newNotificationStatus
		)
		const mainMenu = await createAuthenticatedMenu(ctx)
		await ctx.reply(
			newNotificationStatus
				? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –≤ 18:00.'
				: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã',
			mainMenu
		)
	} else {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.')
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
bot.hears('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', async ctx => {
	await deleteAllPreviousMessages(ctx)
	const mainMenu = await createAuthenticatedMenu(ctx)
	await ctx.reply(
		`–û–±–Ω–∞—Ä—É–∂–∏–ª–∏ –±–∞–≥ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞!  @Plaginnnnn üåê

üîí –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Telegram.

üéì –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –±–æ—Ç –æ–∫–∞–∂–µ—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏.`,
		mainMenu
	)
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º)
bot.on('callback_query', async ctx => {
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const user = await getUser(userId);
    if (!user || !user.token) {
        await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
        return;
    }

    const token = user.token;
    const callbackData = ctx.callbackQuery.data;

    if (callbackData === 'noop') {
        return await ctx.answerCbQuery();
    }

    if (callbackData === 'back_to_schedule') {
        await ctx.answerCbQuery();
        return await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', createScheduleMenu);
    }

    if (callbackData.startsWith('date:')) {
        const [year, month, day] = callbackData.split(':')[1].split('-').map(Number);
        const selectedDate = new Date(year, month - 1, day);
        
        const schedules = await getScheduleForDate(token, selectedDate);

        if (schedules && schedules.length > 0) {
            await ctx.answerCbQuery();
            
            const message = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${formatDate(selectedDate)}:\n\n${formatScheduleMessage(schedules)}`;

            await ctx.editMessageText(message, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é',
                                callback_data: `month:${year}-${month - 1}`,
                            },
                        ],
                    ],
                },
            });
        } else {
            await ctx.answerCbQuery(`–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (${formatDate(selectedDate)}) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.`);
        }
    }

	if (callbackData.startsWith('month:')) {
		const [year, month] = callbackData.split(':')[1].split('-').map(Number)
		const calendar = createCalendar(year, month)
		const monthNames = [
			'–Ø–Ω–≤–∞—Ä—å',
			'–§–µ–≤—Ä–∞–ª—å',
			'–ú–∞—Ä—Ç',
			'–ê–ø—Ä–µ–ª—å',
			'–ú–∞–π',
			'–ò—é–Ω—å',
			'–ò—é–ª—å',
			'–ê–≤–≥—É—Å—Ç',
			'–°–µ–Ω—Ç—è–±—Ä—å',
			'–û–∫—Ç—è–±—Ä—å',
			'–ù–æ—è–±—Ä—å',
			'–î–µ–∫–∞–±—Ä—å',
		]

		const keyboard = calendar.map(week =>
			week.map(day =>
				day
					? Markup.button.callback(day, `date:${year}-${month + 1}-${day}`)
					: Markup.button.callback(' ', 'noop')
			)
		)

		keyboard.unshift([
			Markup.button.callback('<<', `month:${year}-${month - 1}`),
			Markup.button.callback(monthNames[month], 'noop'),
			Markup.button.callback('>>', `month:${year}-${month + 1}`),
		])

		await ctx.answerCbQuery()
		await ctx.editMessageText(
			'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É:',
			Markup.inlineKeyboard(keyboard)
		)
	}
})
//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—É–≥–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.hears('Export Google Calendar', authMiddleware, async ctx => {
	const token = ctx.state.user.token
	const csvBuffer = await exportScheduleToCSV(token)

	await ctx.replyWithDocument(
		{ source: csvBuffer, filename: 'schedule.csv' },
		{ caption: '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –¥–ª—è Google Calendar.' }
	)
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
    await deleteAllPreviousMessages(ctx);

    const userId = ctx.from.id;

    switch (ctx.session.state) {
        case 'awaitingLogin':
            ctx.session.login = ctx.message.text;
            await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:');
            await deleteAllPreviousMessages(ctx);
            ctx.session.state = 'awaitingPassword';
            break;
        case 'awaitingPassword':
            const { login } = ctx.session;
            const password = ctx.message.text;
            await ctx.deleteMessage();

            const processingMsg = await ctx.reply('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            try {
                const response = await axios.get(`https://iep.kgeu.ru/api/auth`, {
                    params: { login, password },
                });

                if (response.data.type === 'success') {
                    const { token, userData } = response.data.payload;
                    await saveUser(userId, login, token, userData, false, password);
                    users.set(userId, { token, userData, login, password }); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Map –≤ –ø–∞–º—è—Ç–∏
                    const shortName = getShortName(
                        userData.LastName,
                        userData.FirstName,
                        userData.ParentName
                    );
                    await ctx.deleteMessage(processingMsg.message_id);
                    await ctx.reply(
                        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.LastName} ${userData.FirstName} ${userData.ParentName}! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.`,
                        createMainMenu(true, shortName)
                    );
                } else {
                    await ctx.deleteMessage(processingMsg.message_id);
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                        createMainMenu(false)
                    );
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
                await ctx.deleteMessage(processingMsg.message_id);
                await ctx.reply(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                    createMainMenu(false)
                );
            }

            delete ctx.session.state;
            delete ctx.session.login;
            break;
        default:
            const user = await getUser(userId);
            await ctx.reply(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.',
                createMainMenu(
                    !!user,
                    user
                        ? getShortName(
                            user.userData.LastName,
                            user.userData.FirstName,
                            user.userData.ParentName
                        )
                        : ''
                )
            );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
	console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err)
	const userId = ctx.from.id
	const isAuthenticated = users.has(userId)
	const mainMenu = createMainMenu(
		isAuthenticated,
		isAuthenticated
			? getShortName(
					users.get(userId).userData.LastName,
					users.get(userId).userData.FirstName,
					users.get(userId).userData.ParentName
			  )
			: ''
	)
})


